/*
 * This source file was generated by the Gradle 'init' task
 */

#include "app.h"
#include "DoublyLinkedList.h"
#include "PaymentTransaction.h"
#include <cassert>

void testDoublyLinkedList() {
    DoublyLinkedList<PaymentTransaction> transactions;

    PaymentTransaction t1(1, 100.0, "Payment 1");
    PaymentTransaction t0(0, 50.0, "Payment 0");
    PaymentTransaction t2(2, 200.0, "Payment 2");
    PaymentTransaction t3(3, 300.0, "Payment 3");

    transactions.addFront(t1);
    transactions.addFront(t0);
    transactions.addBack(t2);
    transactions.addBack(t3);

    // Test forward order
    Node<PaymentTransaction>* head = transactions.getHead();
    assert(head->data.id == 0);
    assert(head->next->data.id == 1);
    assert(head->next->next->data.id == 2);
    assert(head->next->next->next->data.id == 3);

    // Test backward order
    Node<PaymentTransaction>* tail = transactions.getTail();
    assert(tail->data.id == 3);
    assert(tail->prev->data.id == 2);
    assert(tail->prev->prev->data.id == 1);
    assert(tail->prev->prev->prev->data.id == 0);

    // Test remove
    transactions.remove(head->next); // remove t1

    std::cout << "TEST: After removing head->next: Transactions in forward order:" << std::endl;
    transactions.printForward();

    assert(head->next->data.id == 2);
    assert(tail->prev->data.id == 2);

    std::cout << "All doubly linked list tests passed!" << std::endl;
}

int main() {
    xaviers_school::Greeter greeter;
    assert(greeter.greeting().compare("Hello, Big World!") == 0);
    testDoublyLinkedList();
    return 0;
}
